C51 COMPILER V9.60.0.0   FARADAY                                                           12/13/2023 10:32:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE FARADAY
OBJECT MODULE PLACED IN .\Output\faraday.obj
COMPILER INVOKED BY: D:\OleksandrVelihorskyi\KEIL\C51\BIN\C51.EXE faraday.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\
                    -..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\Software Delay;..\..\..\Include) DEFINE(FOSC_160000) D
                    -EBUG OBJECTEXTEND PRINT(.\LST\faraday.lst) TABS(5) OBJECT(.\Output\faraday.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "Common.h"
   5          #include "Delay.h"
   6          #include "soft_delay.h"
   7          
   8          #define TESTBAT P10
   9          
  10          void decodeFaraday(void);
  11          
  12          
  13          extern unsigned char pow_st_now[5];
  14          
  15          extern unsigned char status_battery, status_power, voltage_battery,ups_connected;
  16          extern unsigned int cnt_sirena;
  17          extern unsigned char flag_ups_send;
  18          
  19          uint8_t faradaRecData[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  20          
  21          const uint8_t filterFaraday =30;
  22          const uint8_t faradaGetData[13]  = {0x55,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56};
  23          //uint8_t faradaGetData[13]  = {0x55,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56};
  24          //--------------- Smart UPS write -------------------------
  25          void upsWritePack(void){
  26   1      unsigned char i_char, i_bit;
  27   1        P10_OpenDrain_Mode; set_P10;  delay_us(90);  //TESTBAT=1;
  28   1        for (i_char=0;i_char<13; i_char++){
  29   2           TESTBAT=0;  delay_us(90);   //Start bit send   
  30   2           for (i_bit=0;i_bit<8; i_bit++){
  31   3              if ((faradaGetData[i_char] >> i_bit) & 1) set_P10; else  clr_P10; //TESTBAT=1; else  TESTBAT=0;
  32   3              delay_us(90);  
  33   3           }
  34   2           set_P10; //TESTBAT=1;  
  35   2           if (i_char<12) delay_us(90);   //Stop bit send 
  36   2        } 
  37   1        clr_P10; //TESTBAT=0;
  38   1        for  (i_char=0; i_char<16; i_char++) faradaRecData[i_char]=0;  //Clear incoming buffer
  39   1        P10_Input_Mode;
  40   1        flag_ups_send=4;  //wait time for next send
  41   1      }
  42          //0xA9 0x40 0x40 0x40 0x40 0x40 0xD7 
  43          
  44          //--------------- Smart UPS write -------------------------
  45          void upsReadPack(void){
  46   1        unsigned char i_char, i_bit; 
  47   1        unsigned int i_cnt=0;
  48   1        while (TESTBAT){ //Skip start bit send  
  49   2         delay_us(5);    
  50   2          if (i_cnt++>3500){
  51   3             return;
  52   3          }     
  53   2        }   
C51 COMPILER V9.60.0.0   FARADAY                                                           12/13/2023 10:32:01 PAGE 2   

  54   1        delay_us(111); //Set bit centre position 120
  55   1        for (i_char=0;i_char<16; i_char++){
  56   2           for (i_bit=0;i_bit<8; i_bit++){
  57   3              if (P10==1) faradaRecData[i_char] = faradaRecData[i_char] | (1 << i_bit); //Set bit
  58   3              delay_us(90);  //Wait next bit  90
  59   3           } delay_us(180); //Skip Stop bit send 180 
  60   2        }  
  61   1        
  62   1      }
  63          //-----------------------------------------------------------
  64          void upsReadPackBR(void){
  65   1        unsigned char i, i_bit,  i_wait;
  66   1      unsigned int i_cnt=0;     
  67   1        //Read start packet 
  68   1        i_cnt=0;     
  69   1        while (TESTBAT){ //Skip start bit send  
  70   2          delay_us(1);  i_cnt++;  
  71   2          if (i_cnt>3500) return;
  72   2        }    
  73   1        //Detect start bit length  
  74   1        i_cnt=0;  
  75   1        while (!TESTBAT){ 
  76   2          delay_us(1); i_cnt++;   
  77   2          if (i_cnt>3500)    return;
  78   2        }    
  79   1        i_cnt=i_cnt+1;
  80   1        for (i=0;i<16; i++){
  81   2           delay_us(i_cnt/2);  
  82   2           faradaRecData[i] = 0;  
  83   2           for (i_bit=0;i_bit<8; i_bit++){
  84   3              if (P10==1) faradaRecData[i] = faradaRecData[i] | (1 << i_bit); //Set bit
  85   3              delay_us(i_cnt);  //Wait next bit
  86   3           } 
  87   2           i_wait=0;
  88   2           while(TESTBAT){
  89   3              delay_us(1); i_wait++;
  90   3              if (i_cnt>3500) return;   
  91   3           } 
  92   2           delay_us(i_cnt); //Skip Stop bit send 180 
  93   2        }  
  94   1        
  95   1      }
  96          //-----------------------------------------------------------
  97          void ackFaraday(void){
  98   1        upsReadPack();
  99   1        P10_OpenDrain_Mode;   clr_P10;    flag_ups_send=2;  //TESTBAT=0;
 100   1        
 101   1         
 102   1         /*Запрос информации от UPS:
 103   1             1-й байт - 1 байт   стартовый байт 0x55   
 104   1             2-й байт - 1 байт команды 0х01 - запрос на выдачу данных  
 105   1             3-12-й байт - значение 0х00
 106   1             13-й байт - контрольная сумма, сумма младших 8 бит всех предыдущих байт в посылке, если байты от 3 
             -до 12 = 0, а байт комманды = 0x01, то CRC = 0x56
 107   1        Запрос на включение/выключение асимметричного заряда АКБ:
 108   1            2-й байт - 1 байт команды 0х07 - запрос на изменение режима заряда АКБ
 109   1            3-5-й байт - значение 0х00
 110   1            6-й байт - команда на включение/выключение асимметричного заряда - 0х01 - включить, 0х00 - выключит
 111   1            7-12-й байт - значение 0х0
 112   1            13-й байт - контрольная сумма, сумма младших 8 бит всех предыдущих байт в посылке, если байты от 3 д
             -о 12 = 0, а байт комманды = 0x01, то CRC = 0x5
 113   1        */
C51 COMPILER V9.60.0.0   FARADAY                                                           12/13/2023 10:32:01 PAGE 3   

 114   1        decodeFaraday();
 115   1      }  
 116          
 117          
 118          void decodeFaraday(void){
 119   1      // val_voltage_battery,i_outstrum;
 120   1      unsigned char val_voltage_battery, i_status_power, i_status_battery, i_voltage_battery; 
 121   1        
 122   1         if (faradaRecData[0]==0x55 && faradaRecData[1]==0x01){ //стартовый байт 0x55
 123   2         //3-й байт - старшие 8-мь байт напряжения на АКБ х 10
 124   2         //4-й байт - младшие 8-мь байт напряжения на АКБ х 10
 125   2           val_voltage_battery=faradaRecData[2];
 126   2           if (faradaRecData[2]>0) i_status_battery=0; else i_status_battery=1;
 127   2           if (val_voltage_battery<108){
 128   3              i_voltage_battery=1;  //Low battery voltage
 129   3           } else 
 130   2           if (val_voltage_battery>115 && val_voltage_battery<150){
 131   3              i_voltage_battery=0; //Good battery voltage
 132   3           } else {
 133   3              i_voltage_battery=voltage_battery; //Old status
 134   3           }
 135   2        //5-й байт - ток АКБ х 10
 136   2         //  i_batstrum=10*faradaRecData[4];
 137   2        //6-й байт - ток выхода х 10     
 138   2       //    i_outstrum=0x10*faradaRecData[5];
 139   2          
 140   2        //7-й байт - сеть 220В: 0х00 - нет сети, 0х01 - есть сеть, 0х02 - нет заземления
 141   2           if (faradaRecData[6]==1 || faradaRecData[6]==2) i_status_power=0; else 
 142   2           if (faradaRecData[6]==0) i_status_power=1; else i_status_power=status_power;
 143   2      //    8-й байт - асимметричный заряд: 0х00 - выключен, 0х01 - включен
 144   2      //    9-й байт - состояние заряда АКБ: 0х00 - АКБ отсутствует или авария цепи заряда, 0х01 - заряд включен
             -, 0х02 - заряд ограничен из-за превышения выходной мощности блока 
 145   2      //    11-й байт - номер недели производства, если 0х00 - калибровка блока не проводилась 
 146   2      //    12-й байт - год производства, если 0х00 - калибровка блока не проводилась
 147   2      //    13-й байт - старшие 8-мь бит серийного номера, 0х00 - калибровка блока не проводилась 
 148   2      //    14-й байт - младшие 8-мь бит серийного номера, 0х00 - калибровка блока не проводилась
 149   2      //    15-й байт - версия програмного обеспечения, 0х00 - калибровка блока не проводилась
 150   2      //    16-й байт - CRC, контрольная сумма младших 8 бит всех предыдущий байт в посылке
 151   2           if (status_power!=i_status_power){
 152   3                
 153   3               if (pow_st_now[0]==1){
 154   4                 pow_st_now[0]=0;
 155   4                 status_power=i_status_power;
 156   4               } else
 157   3               if (pow_st_now[0]==0){
 158   4                  pow_st_now[0]=filterFaraday;  
 159   4                 // if (i_status_power==0)  pow_st_now[0]=5; else pow_st_now[0]=180;
 160   4               }     
 161   3           } else pow_st_now[0]=0;
 162   2         
 163   2        /*     if (i_status_battery>0 && i_voltage_battery>0){
 164   2              i_voltage_battery=0;
 165   2           } */
 166   2           
 167   2           if (status_battery!=i_status_battery){
 168   3               if (pow_st_now[1]==1){
 169   4                   pow_st_now[1]=0;
 170   4                   status_battery=i_status_battery;
 171   4               } else  
 172   3               if (pow_st_now[1]==0) pow_st_now[1]=filterFaraday;         
 173   3           } else pow_st_now[1]=0; 
 174   2           
C51 COMPILER V9.60.0.0   FARADAY                                                           12/13/2023 10:32:01 PAGE 4   

 175   2           
 176   2           if (voltage_battery!=i_voltage_battery){
 177   3               if (pow_st_now[2]==1){
 178   4                  pow_st_now[2]=0;
 179   4                  voltage_battery=i_voltage_battery;
 180   4               } else  
 181   3               if (pow_st_now[2]==0) pow_st_now[2]=filterFaraday;         
 182   3           } else pow_st_now[2]=0;
 183   2           //voltage_battery=0; 
 184   2           ups_connected=1;
 185   2        
 186   2      /*    
 187   2           Примечание:     
 188   2          1) При отсуствии подключенного АКБ в 3, 4, 5 и 9 байтах ответа будет 0х00
 189   2          2) Короткое замыкание, переполюсовка или обрыв в цепи заряда интерпретируется как отсутствие подключен
             -ного АК   
 190   2      */     
 191   2         }
 192   1      
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    917    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     30      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
