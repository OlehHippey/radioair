C51 COMPILER V9.60.0.0   RSOBMEN                                                           09/21/2022 11:08:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE RSOBMEN
OBJECT MODULE PLACED IN .\Output\rsobmen.obj
COMPILER INVOKED BY: D:\OleksandrVelihorskyi\KEIL\C51\BIN\C51.EXE rsobmen.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\
                    -..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\Software Delay;..\..\..\Include) DEFINE(FOSC_160000) D
                    -EBUG OBJECTEXTEND PRINT(.\LST\rsobmen.lst) TABS(5) OBJECT(.\Output\rsobmen.obj)

line level    source

   1          //********************************************************************************************************
             -***
   2          //  File Function: N76E003 UART RS485 slave demo code
   3          //********************************************************************************************************
             -***
   4          #include "N76E003.h"
   5          #include "SFR_Macro.h"
   6          #include "Function_define.h"
   7          #include "Common.h"
   8          #include "Delay.h"
   9          #include "stdio.h"
  10          #include "soft_delay.h"
  11          #include "rsobmen.h"
  12          
  13          
  14          
  15          extern uint8_t rs485Count;
  16          extern unsigned char sound_rst,sound_type,z7out,z8out,z7level,z8level,tamperStatus,tamperSender,rsConnect,
  17                 zonesTypeOpened,zonesTypeClosed,zonesArmed,ups_connected,passwordMode,tamperDirection,
  18                 progMode,checkMode,status_battery,voltage_battery,status_power; 
  19          extern unsigned char expanderADDR;
  20          extern uint8_t rsReceivedBuf[RECFRMMAXLEN]; 
  21          volatile uint8_t rsTransmitBuf[RECFRMMAXLEN]; 
  22          extern unsigned char zonesSendTry[8];
  23          extern unsigned char statusZONES[8];
  24          extern unsigned char passwordEntered[8];
  25          extern unsigned char lcd_row[16];
  26          extern const unsigned char leds_Status[8];
  27          
  28          extern unsigned char get_Bit(char num_val, char num_bit);
  29          extern unsigned char set_Bit(char num_val, char num_bit);
  30          extern unsigned char clr_Bit(char num_val, char num_bit);
  31          
  32          extern unsigned char makeHexToInt(char dec_symbol);
  33          extern unsigned char calcCRC8bit(uint8_t clc_crc, uint8_t inbyte);
  34          //==================================================================================
  35          // Send single byte
  36          void SendRsByte(uint8_t u8data){
  37   1         TI_1 = 0;
  38   1         SBUF_1 = u8data;
  39   1         while (!TI_1);
  40   1          //TI_1 = 0;
  41   1      }
  42          //Send string frame function--------------------------------------------------------
  43          void SendRsString(uint8_t rsLength){
  44   1          uint8_t i;
  45   1          delay_ms(1); set_P15; delay_ms(1);  //REDE = 1; 
  46   1          for (i = 0; i < rsLength; i++){
  47   2            Send_Data_To_UART1(rsTransmitBuf[i]); // delay_us(10);
  48   2          }
  49   1          delay_ms(1); clr_P15; //REDE=0;
  50   1          rsConnect=0;
  51   1      }
C51 COMPILER V9.60.0.0   RSOBMEN                                                           09/21/2022 11:08:21 PAGE 2   

  52          
  53          //-----------------------------------------------------
  54          void Clr_ReceivedBuf(void){
  55   1          uint8_t i;
  56   1          for (i = 0; i < RECFRMMAXLEN; i++)
  57   1              rsReceivedBuf[ i] = 0;
  58   1          rs485Count=0; 
  59   1      }
  60          //-----------------------------------------------------
  61          void Clr_TransmitedBuf(void){
  62   1          uint8_t i;
  63   1          for (i = 0; i < RECFRMMAXLEN; i++)
  64   1              rsTransmitBuf[ i] = 0;
  65   1      }
  66          //========================== BASE   RS485 FUNCTIONS =================================
  67          void PREPARE_RS485(unsigned char commandANS){
  68   1        uint8_t transmitLength=0;
  69   1        uint8_t rs485_Length=0;   
  70   1        unsigned char i, i_temp;
  71   1        unsigned char recByteBuf[STATUSMAXLEN]={0};
  72   1        recByteBuf[transmitLength++]=expanderADDR;  //Sender
  73   1        recByteBuf[transmitLength++]=0x00;          //Receiver
  74   1        recByteBuf[transmitLength++]=0x00;          //Data Length - byte 2
  75   1        recByteBuf[transmitLength++]=commandANS;    //Command answer
  76   1        i_temp=0; 
  77   1        if (tamperStatus || tamperSender){ //Tamper trouble
  78   2          i_temp=set_Bit(i_temp,0);
  79   2          if (tamperSender>0) tamperSender--;  
  80   2        }
  81   1        if (status_battery==1){ //Battery present
  82   2          i_temp=set_Bit(i_temp,1);
  83   2        }
  84   1        if (voltage_battery==1){ //Battery low voltage
  85   2           i_temp=set_Bit(i_temp,2);
  86   2        }
  87   1         if (status_power==1){ //Power trouble
  88   2          i_temp=set_Bit(i_temp,3);
  89   2        }
  90   1        if (ups_connected==30){ //Connect with UPS trouble
  91   2          i_temp=set_Bit(i_temp,4);
  92   2        }
  93   1        if (progMode>20){ //Expander is in prog mode
  94   2          i_temp=set_Bit(i_temp,5);
  95   2        }
  96   1        if (passwordMode){ //password was Entered
  97   2          i_temp=set_Bit(i_temp,6);
  98   2        }
  99   1        recByteBuf[transmitLength++]=i_temp;
 100   1        i_temp=0;
 101   1        for (i=0; i<8; i++){  //Send zones status
 102   2           if (zonesSendTry[i] || statusZONES[i]==1){ //Zone is not restored
 103   3              i_temp=set_Bit(i_temp,i);
 104   3           }
 105   2           if (zonesSendTry[i]) zonesSendTry[i]--;  
 106   2        } 
 107   1        recByteBuf[transmitLength++]=i_temp;
 108   1        if (passwordMode){ //password was Entered
 109   2           passwordMode--;  
 110   2           for (i=0;i<8;i++){
 111   3              recByteBuf[transmitLength++]=passwordEntered[i];
 112   3           }
 113   2        }
C51 COMPILER V9.60.0.0   RSOBMEN                                                           09/21/2022 11:08:21 PAGE 3   

 114   1        recByteBuf[2]=transmitLength-2; //Set datablock length
 115   1        i_temp=0;
 116   1        for (i=0;i<transmitLength;i++){
 117   2           i_temp=calcCRC8bit(i_temp,recByteBuf[i]);
 118   2        }
 119   1        recByteBuf[transmitLength++]=i_temp; //ADD CRC
 120   1        
 121   1        Clr_TransmitedBuf();  rs485_Length=0;
 122   1        rsTransmitBuf[rs485_Length++]=0x0D; 
 123   1        for (i=0; i<transmitLength; i++){
 124   2           i_temp=recByteBuf[i]/0x10;
 125   2           if (i_temp<10) i_temp+=0x30; else i_temp+=0x37;
 126   2           rsTransmitBuf[rs485_Length++]=i_temp;
 127   2           i_temp=recByteBuf[i]-0x10*(recByteBuf[i]/0x10);  
 128   2           if (i_temp<10) i_temp+=0x30; else i_temp+=0x37;
 129   2           rsTransmitBuf[rs485_Length++]=i_temp;      
 130   2        }
 131   1        rsTransmitBuf[rs485_Length++]=0x0A; 
 132   1        SendRsString(rs485_Length);
 133   1      }
 134          //-----------------------------------------------------------------------------------
 135          void DECODE_RS485(void){
 136   1        unsigned char i; 
 137   1        unsigned char rsCRC=0;     
 138   1        unsigned char recByteBuf[12]={0,0,0,0,0,0,0,0,0,0,0,0};
 139   1         
 140   1        if (rsReceivedBuf[0]==0x0D && rsReceivedBuf[rs485Count-1]==0x0A && rs485Count==26){
 141   2           //0001090000FFFFA5A5A5A5C2  
 142   2           //BYTE 0  - Sender MB
 143   2           //BYTE 1  - Receiver
 144   2           //BYTE 2  - DataLength
 145   2           //BYTE 3  - Command       
 146   2           //BYTE 4     - bits 0..3 - Sound type, bit 4- Z7 is OUT, bit 5 - Z8 is OUT, bit 6- z7- HIGH LEVEL, bi
             -t 7 - Z8 HIGH LEVEL
 147   2           //BYTES 5..6 - ZONES STATUS 00-2EOL, 10-NC, 01-NO, 11-EOL, 
 148   2           //BYTE 7..10 - ZONES LED SHOW - byte for zone
 149   2           //BYTE 11 - CRC  
 150   2             
 151   2           for (i=0;i<12;i++){
 152   3              recByteBuf[i]=0x10*makeHexToInt(rsReceivedBuf[1+2*i])+makeHexToInt(rsReceivedBuf[2+2*i]);
 153   3              if (i<11){
 154   4                 rsCRC=calcCRC8bit(rsCRC,recByteBuf[i]);
 155   4              }  
 156   3           } 
 157   2           //Check Reception Address
 158   2           if (expanderADDR!=recByteBuf[1]) return;
 159   2           //Check CRC
 160   2           if (rsCRC!=recByteBuf[11]) return;
 161   2      
 162   2           //Sound type
 163   2            sound_type=recByteBuf[4]&0x07; 
 164   2         /*  if (sound_type==0){ 
 165   2              sound_type=1;//recByteBuf[4]&0x07; 
 166   2              sound_rst=5;  
 167   2           } */
 168   2           //Zones information
 169   2           zonesTypeClosed=recByteBuf[5];   //Zones type is NC
 170   2           zonesTypeOpened=recByteBuf[6];   //Zones type is NO
 171   2           if (tamperDirection==0){
 172   3             for (i=0; i<4; i++){
 173   4                rsCRC=0x0F&recByteBuf[7+i];  
 174   4                if (rsCRC<8){  
C51 COMPILER V9.60.0.0   RSOBMEN                                                           09/21/2022 11:08:21 PAGE 4   

 175   5                   lcd_row[2*i]=leds_Status[rsCRC];
 176   5                } else {
 177   5                   lcd_row[2*i]=0;
 178   5                }     
 179   4                rsCRC=(0xF0&recByteBuf[7+i])>>4;
 180   4                if (rsCRC<8){  
 181   5                   lcd_row[2*i+1]=leds_Status[rsCRC];
 182   5                } else {
 183   5                  lcd_row[2*i+1]=0;
 184   5                } 
 185   4             }
 186   3           }
 187   2           //Z7 and Z8 options
 188   2           z7out=get_Bit(recByteBuf[4],4);
 189   2           z8out=get_Bit(recByteBuf[4],5);
 190   2           if (z7out){
 191   3               z7level=get_Bit(recByteBuf[4],6);
 192   3           } else {
 193   3              z7level=0;  //Not PGM
 194   3           }
 195   2           if (z8out){
 196   3               z8level=get_Bit(recByteBuf[4],7);
 197   3           } else {
 198   3              z8level=0;  //Not PGM
 199   3           }
 200   2           PREPARE_RS485(recByteBuf[3]);
 201   2        } 
 202   1      }
 203          
 204          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1418    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =     64      68
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
