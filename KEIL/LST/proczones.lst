C51 COMPILER V9.60.0.0   PROCZONES                                                         09/21/2022 10:50:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PROCZONES
OBJECT MODULE PLACED IN .\Output\proczones.obj
COMPILER INVOKED BY: D:\OleksandrVelihorskyi\KEIL\C51\BIN\C51.EXE proczones.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\.
                    -.\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\Software Delay;..\..\..\Include) DEFINE(FOSC_160000)
                    - DEBUG OBJECTEXTEND PRINT(.\LST\proczones.lst) TABS(5) OBJECT(.\Output\proczones.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "Common.h"
   5          #include "Delay.h"
   6          #include "stdio.h"
   7          #include "proczones.h"
   8          
   9          
  10          #define colorGrn 0x55;
  11          #define colorRed 0xAA;
  12          #define cFastRed 0x22;
  13          #define cSlowRed 0x0A;
  14          
  15          #define zonesBounce 3;
  16          extern unsigned char z7out, z8out, zonesClosed, zonesOpened, zonesTypeClosed, zonesTypeOpened, 
  17               progMode, checkMode, tamperStatus, tamperControl, tamperSender,z7level, z8level, //ups_connected, 
  18               sound_ok,sound_prog,rsConnect; //status_battery, status_power,voltage_battery,
  19          extern unsigned char zonesControll[8];
  20          extern unsigned char zonesSendTry[8];
  21          extern unsigned char statusZONES[8];
  22          extern unsigned char lcd_row[16];
  23          
  24          volatile bit progBtnPressed=0;
  25          volatile unsigned int  VDD_Voltage[8]={0}; 
  26          extern uint8_t expanderADDR, newExpADDR;
  27          extern unsigned int tamperDirection;  
  28          
  29          volatile uint8_t tempExpADDR=0;
  30          
  31          
  32          extern unsigned char set_Bit(char num_val, char num_bit);
  33          extern unsigned char clr_Bit(char num_val, char num_bit);
  34          extern unsigned char get_Bit(char num_val, char num_bit);
  35          //============= ZONES FUNCTIONS ===========================
  36          void repaintPower(void){
  37   1      /*  if (upsConnect==30){  //04-0x0A,Slow red - 0b00001010  
  38   1            lcd_row[8]=lcd_row[9]=0x0A; 
  39   1        } else { 
  40   1           if (status_battery){
  41   1             lcd_row[8]=colorRed; 
  42   1           } else 
  43   1           if (voltage_battery){
  44   1             lcd_row[8]=cFastRed; 
  45   1           } else {
  46   1             lcd_row[8]=colorGrn;
  47   1           }     
  48   1           if (status_power){
  49   1             lcd_row[9]=cFastRed; 
  50   1           } else {
  51   1             lcd_row[9]=colorGrn;
  52   1           }     
  53   1        }  
C51 COMPILER V9.60.0.0   PROCZONES                                                         09/21/2022 10:50:03 PAGE 2   

  54   1        
  55   1        if (tamperStatus){
  56   1          lcd_row[10]=colorRed;  
  57   1        } else {
  58   1          lcd_row[10]=colorGrn;  
  59   1        }
  60   1        
  61   1        if (rsConnect==30){
  62   1          lcd_row[11]=colorRed; 
  63   1        } else   
  64   1        if (rsConnect>10){
  65   1           lcd_row[11]=cSlowRed;
  66   1        } else {
  67   1          lcd_row[11]=colorGrn;
  68   1        }*/
  69   1        lcd_row[8]=lcd_row[9]=lcd_row[10]=lcd_row[11]=0; 
  70   1        lcd_row[12]=lcd_row[13]=lcd_row[14]=lcd_row[15]=0; 
  71   1      }
  72          //---------------------------------------------------------
  73          void checkZonesStatus(unsigned char zoneNum){
  74   1        const unsigned int z_min=1200;
  75   1        const unsigned int z_max=2000;  
  76   1        unsigned char z_color=0;     
  77   1        unsigned int z_max_val=z_max;
  78   1        if (zoneNum>5) z_max_val+=1000;      
  79   1        if (VDD_Voltage[zoneNum]<z_min){
  80   2           zonesClosed=set_Bit(zonesClosed,zoneNum);
  81   2           zonesOpened=clr_Bit(zonesOpened,zoneNum);  
  82   2           z_color=0x22; 
  83   2           if (zoneNum==7) progBtnPressed=1;
  84   2        } else   
  85   1        if (VDD_Voltage[zoneNum]>z_max_val){
  86   2           zonesClosed=clr_Bit(zonesClosed,zoneNum);
  87   2           zonesOpened=set_Bit(zonesOpened,zoneNum);  
  88   2           z_color=0xAA;  
  89   2           if (zoneNum==7) progBtnPressed=0;  
  90   2        } else {
  91   2           zonesClosed=clr_Bit(zonesClosed,zoneNum);
  92   2           zonesOpened=clr_Bit(zonesOpened,zoneNum);  
  93   2           z_color=0x55;    
  94   2           if (zoneNum==7) progBtnPressed=0;  
  95   2        } 
  96   1        if (tamperDirection==0){
  97   2          if (rsConnect==30) lcd_row[zoneNum]=z_color; 
  98   2          repaintPower();
  99   2        }
 100   1        return;
 101   1      }
 102          //---------------------------------------------------------------
 103          void checkProgMode(void){
 104   1        unsigned char i=0;   
 105   1        for (i=0;i<16; i++){ 
 106   2          if (i<8) lcd_row[i]=0; else lcd_row[i]=0x05;
 107   2        }     
 108   1        if (tempExpADDR>0 && tempExpADDR<9){  //Show programming Address 
 109   2           lcd_row[tempExpADDR-1]=colorRed; 
 110   2        } else
 111   1        if (expanderADDR>0 && expanderADDR<9){  //Show current Address 
 112   2          lcd_row[expanderADDR-1]=colorGrn;    
 113   2        }   
 114   1        if (tamperStatus){ //Box open 
 115   2           if (progBtnPressed){ //Button pressed
C51 COMPILER V9.60.0.0   PROCZONES                                                         09/21/2022 10:50:03 PAGE 3   

 116   3              if (progMode==0){ //Start Press
 117   4                 progMode++; 
 118   4                 tempExpADDR=0;  
 119   4              } else {
 120   4                 if (progMode>5 && progMode<8){ //Set Address 1
 121   5                    if (tempExpADDR==0){
 122   6                       sound_prog++;  tempExpADDR++;  
 123   6                    }     
 124   5                 } else 
 125   4                 if (progMode>8 && progMode<11){ //Set Address 2
 126   5                    if (tempExpADDR==1){
 127   6                       sound_prog++; tempExpADDR++;  
 128   6                    }                
 129   5                 } else 
 130   4                 if (progMode>11 && progMode<14){ //Set Address 3
 131   5                    if (tempExpADDR==2){
 132   6                       sound_prog++; tempExpADDR++;  
 133   6                    }             
 134   5                 } else 
 135   4                 if (progMode>14 && progMode<17){ //Set Address 4
 136   5                    if (tempExpADDR==3){
 137   6                       sound_prog++;  tempExpADDR++;  
 138   6                    }              
 139   5                 } else 
 140   4                 if (progMode>17 && progMode<20){ //Set Address 5
 141   5                    if (tempExpADDR==4){
 142   6                       sound_prog++; tempExpADDR++;  
 143   6                    }               
 144   5                 } else 
 145   4                 if (progMode>20 && progMode<23){ //Set Address 6
 146   5                    if (tempExpADDR==5){
 147   6                       sound_prog++; tempExpADDR++;  
 148   6                    }              
 149   5                 } else 
 150   4                 if (progMode>23 && progMode<26){ //Set Address 7
 151   5                    if (tempExpADDR==6){
 152   6                       sound_prog++; tempExpADDR++;  
 153   6                    }              
 154   5                 } else 
 155   4                 if (progMode>26 && progMode<29){ //Set Address 8
 156   5                    if (tempExpADDR==7){
 157   6                       sound_prog++;  tempExpADDR++;  
 158   6                    }              
 159   5                 };
 160   4              }
 161   3              if (tamperDirection<40) tamperDirection=40;
 162   3           } else { //Button is unpressed
 163   3              if (progMode>0 && progMode<5){
 164   4                 if (expanderADDR==0 || expanderADDR>8){
 165   5                    sound_ok=5; //Error Address
 166   5                 } else {
 167   5                    checkMode=expanderADDR*5;
 168   5                    sound_prog=expanderADDR;  
 169   5                 }
 170   4              } else 
 171   3              if (tempExpADDR>0){
 172   4                 newExpADDR=tempExpADDR;  
 173   4                 sound_ok=4;     tempExpADDR=0;  tamperDirection=0;
 174   4              }
 175   3              progMode=0;
 176   3           }  
 177   2        } else { //Stop programm mode
C51 COMPILER V9.60.0.0   PROCZONES                                                         09/21/2022 10:50:03 PAGE 4   

 178   2           progMode=0;     checkMode=0;     sound_prog=0;
 179   2             
 180   2        }
 181   1      }
 182          //---------------------------------------------------------------
 183          void readADCdata(void){
 184   1         unsigned int i_chnl;
 185   1         unsigned int adc_value[8]={0};  
 186   1         unsigned char ADCdataH[8]={0};
 187   1         unsigned char ADCdataL[8]={0};
 188   1         //READ ADC CHANNELS
 189   1      //   z7out=1; z8out=1;
 190   1         for (i_chnl=0; i_chnl<8; i_chnl++){
 191   2            if (z7out&&i_chnl==6){
 192   3           //Nothing to do with out 6
 193   3              zonesClosed=clr_Bit(zonesClosed,i_chnl);
 194   3              zonesOpened=clr_Bit(zonesOpened,i_chnl); 
 195   3           } else 
 196   2           if (z8out&&i_chnl==7&&tamperDirection==0){ //Box is closed
 197   3            //Nothing to do with out 7
 198   3              progBtnPressed=0;  
 199   3              zonesClosed=clr_Bit(zonesClosed,i_chnl);
 200   3              zonesOpened=clr_Bit(zonesOpened,i_chnl);          
 201   3           } else { //Read ADC value 
 202   3             if (z7out==0&&i_chnl==6) P01=0;   // Never Up for input
 203   3             if (z8out==0&&i_chnl==7) P00=0;  
 204   3             switch (i_chnl){   
 205   4               case 0:  Enable_ADC_AIN0;  break;   
 206   4               case 1:  Enable_ADC_AIN1;  break;
 207   4               case 2:  Enable_ADC_AIN2;  break;
 208   4               case 3:  Enable_ADC_AIN3;  break;
 209   4               case 4:  Enable_ADC_AIN4;  break;   
 210   4               case 5:  Enable_ADC_AIN5;  break;  
 211   4               case 6:  Enable_ADC_AIN6;  break;
 212   4               case 7:  Enable_ADC_AIN7;  break;          
 213   4               default: Enable_ADC_AIN0;  break;
 214   4             }  
 215   3             clr_ADCF;
 216   3             set_ADCS;                                
 217   3             while(ADCF == 0);
 218   3             ADCdataH[i_chnl] = ADCRH;
 219   3             ADCdataL[i_chnl] = ADCRL;
 220   3             Disable_ADC;  
 221   3            //CALCULATE ADC VALUES
 222   3             adc_value[i_chnl] = ADCdataH[i_chnl];
 223   3             adc_value[i_chnl] <<= 4;
 224   3             adc_value[i_chnl] |=ADCdataL[i_chnl];      
 225   3             VDD_Voltage[i_chnl] = adc_value[i_chnl] * bit_to_voltage_ratio;
 226   3             checkZonesStatus(i_chnl);
 227   3           }     
 228   2        }  
 229   1      }
 230          //---------------------------------------------------------------------------------------
 231          void procZonesStatus(void){
 232   1        unsigned char i, i_temp; 
 233   1        for (i=0;i<8;i++){
 234   2          i_temp=1;     //Trouble as default
 235   2          if (get_Bit(zonesTypeClosed,i) &&  get_Bit(zonesTypeOpened,i) ){ //EOL
 236   3             if (get_Bit(zonesClosed,i)==0 &&  get_Bit(zonesOpened,i)==0){
 237   4                i_temp=3; //Zone is OK
 238   4             }
 239   3          } else 
C51 COMPILER V9.60.0.0   PROCZONES                                                         09/21/2022 10:50:03 PAGE 5   

 240   2          if (get_Bit(zonesTypeClosed,i) &&  get_Bit(zonesTypeOpened,i)==0 ){ //NC
 241   3             if (get_Bit(zonesClosed,i) &&  get_Bit(zonesOpened,i)==0){ 
 242   4                i_temp=3;//Zone is OK
 243   4             }
 244   3          } else
 245   2          if (get_Bit(zonesTypeClosed,i)==0  &&  get_Bit(zonesTypeOpened,i) ){ //NO
 246   3             if (get_Bit(zonesClosed,i) &&  get_Bit(zonesOpened,i)==0){
 247   4                i_temp=3; //Zone is OK
 248   4             }
 249   3          } else { //TODO: 2EOL 
 250   3             if (get_Bit(zonesClosed,i)==0 &&  get_Bit(zonesOpened,i)==0){
 251   4                i_temp=3; //Zone is OK
 252   4             } 
 253   3          } 
 254   2          if (i==6 && z7out){ //Zone 7 check as OUT
 255   3             if (z7level){
 256   4               P01=1; //Set High level
 257   4             } else {
 258   4               P01=0; //Set low level
 259   4             }
 260   3             i_temp=0;
 261   3          }
 262   2          if (i==7 && z8out && tamperStatus==0){ //Zone 7 check as OUT
 263   3             if (z8level){
 264   4               P00=1; //Set High level
 265   4             } else {
 266   4               P00=0; //Set low level
 267   4             }
 268   3             i_temp=0;
 269   3          }
 270   2          if (statusZONES[i]!=i_temp){  //Zone changed status
 271   3             if (zonesControll[i]==0){ 
 272   4                zonesControll[i]=zonesBounce; //Start filtered
 273   4             } else
 274   3             if (zonesControll[i]==1){
 275   4                statusZONES[i]=i_temp;
 276   4                if (i_temp==1){
 277   5                   zonesSendTry[i]=4;
 278   5                }     
 279   4             }
 280   3          } else {
 281   3             zonesControll[i]=0; //Reset filter
 282   3          }
 283   2        }
 284   1        if (tamperDirection) checkProgMode();
 285   1      }
 286          //==================== Check Tamper status and LED controll =============================
 287          void procTamperLed(void){
 288   1        if (tamperDirection==0) { // Tamper
 289   2            P12_Input_Mode;  
 290   2            if (tamperStatus!=P12){
 291   3               if (tamperControl==0){ //Tamper Filtered
 292   4                  tamperControl=zonesBounce;
 293   4               } else 
 294   3               if (tamperControl==1){ //Tamper Filtered finished
 295   4                  tamperControl=0;
 296   4                  tamperStatus=P12;
 297   4                  if (tamperStatus){
 298   5                     tamperSender=3;
 299   5                     tamperDirection=60;  
 300   5                     P12_OpenDrain_Mode;  
 301   5                  }  
C51 COMPILER V9.60.0.0   PROCZONES                                                         09/21/2022 10:50:03 PAGE 6   

 302   4               }
 303   3            } else {
 304   3               tamperControl=0;
 305   3            }
 306   2        }
 307   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2196    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =     17      39
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
